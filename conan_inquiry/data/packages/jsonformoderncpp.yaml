recipies:
  - repo:
      bintray: vthiery/conan-packages/jsonformoderncpp:vthiery
name: JSON for Modern C++
urls:
  docs: https://nlohmann.github.io/json/
  github: nlohmann/json
description: JSON for Modern C++
categories:
  - topic.library.fileformat.generic.json
  - topic.library.fileformat.generic.msgpack
  - topic.library.fileformat.generic.binary
  - topic.library.serialization.lowlevel
  - standard.cpp.11
  - status.5stable
code_example: |
  // create an empty structure (null)
  json j;

  // add a number that is stored as double (note the implicit conversion of j to an object)
  j["pi"] = 3.141;

  // add a Boolean that is stored as bool
  j["happy"] = true;

  // add a string that is stored as std::string
  j["name"] = "Niels";

  // add another null object by passing nullptr
  j["nothing"] = nullptr;

  // add an object inside the object
  j["answer"]["everything"] = 42;

  // add an array that is stored as std::vector (using an initializer list)
  j["list"] = { 1, 0, 2 };

  // add another object (using an initializer list of pairs)
  j["object"] = { {"currency", "USD"}, {"value", 42.99} };

  // instead, you could also write (which looks very similar to the JSON above)
  json j2 = {
    {"pi", 3.141},
    {"happy", true},
    {"name", "Niels"},
    {"nothing", nullptr},
    {"answer", {
      {"everything", 42}
    }},
    {"list", {1, 0, 2}},
    {"object", {
      {"currency", "USD"},
      {"value", 42.99}
    }}
  };

  // create object from string literal
  json j3 = "{ \"happy\": true, \"pi\": 3.141 }"_json;

  // or even nicer with a raw string literal
  auto j4 = R"(
    {
      "happy": true,
      "pi": 3.141
    }
  )"_json;

  // parse explicitly
  auto j5 = json::parse("{ \"happy\": true, \"pi\": 3.141 }");

  // explicit conversion to string
  std::string s = j5.dump();    // {\"happy\":true,\"pi\":3.141}

  // serialization with pretty printing
  // pass in the amount of spaces to indent
  std::cout << j5.dump(4) << std::endl;
  // {
  //     "happy": true,
  //     "pi": 3.141
  // }